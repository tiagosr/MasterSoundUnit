/*
 * Master Sound Unit
 * FM module for the Sega Master System
 * implemented using the MAME YM2413 core
 * along with a (toggleable) PSG emulator to override the builtin one
 * (c) 2017 tiagosr
 */

// TODO list:
// [~] YM2413 core
// [ ] PSG core
// [x] bus logic
// 
// cool stuff for the future maybe perhaps:
// [ ] VRC7 core
// [ ] YM2149/AY core
//

struct OPLL_SLOT {
  uint32_t ar;  // attack rate:  AR << 2
  uint32_t dr;  // decay rate:   DR << 2
  uint32_t rr;  // release rate: RR << 2
  uint8_t  KSR; // key scale rate
  uint8_t  ksl; // key scale level
  uint8_t  ksr; // key scale rate(2): kcode>>KSR
  uint8_t  mul; // multiplier: mul_tab[ML]

  // Phase Generator
  uint32_t phase;      // frequency counter
  uint32_t freq;       // frequency counter step
  uint8_t  fb_shift;   // feedback shift value
  int32_t  op1_out[2]; // slot1 output for feedback

  // Envelope Generator
  uint8_t  eg_type; // percussive/nonpercussive mode
  uint8_t  state;   // phase type
  uint32_t TL;      // total level: TL << 2
  int32_t  TLL;     // adjusted TL
  int32_t  volume;  // envelope counter
  uint32_t sl;      // sustain level: sl_tab[SL]

  uint8_t  eg_sh_dp;  // (dump state)
  uint8_t  eg_sel_dp; // (dump state)
  uint8_t  eg_sh_ar;  // (attack state)
  uint8_t  eg_sel_ar; // (attack state)
  uint8_t  eg_sh_dr;  // (decay state)
  uint8_t  eg_sel_dr; // (decay state)
  uint8_t  eg_sh_rr;  // (release state for non-percussive mode)
  uint8_t  eg_sel_rr; // (release state for non-percussive mode)
  uint8_t  eg_sh_rs;  // (release state for percussive mode)
  uint8_t  eg_sel_rs; // (release state for percussive mode)

  byte     key;  // 0 = key off, >0 = key on

  // LFO
  uint32_t AMmask; // LFO amplitude modulation enable mask
  uint8_t  vib;    // LFO amplitude modulation (vibrato) enable flag

  // waveform select
  uint16_t wavetable;
};

struct OPLL_CH {
  OPLL_SLOT SLOT[2];
  
  // phase generator state
  uint32_t block_fnum; // block + fnum
  uint32_t fc;         // Frequency increment base
  uint32_t ksl_base;   // KeyScaleLevel Base step
  uint8_t  kcode;      // key code (for key scaling)
  uint8_t  sus;        // sustain on/off (release speed in percussive mode)
};

#define RATE_STEPS 8
#define SIN_BITS 10
#define SIN_LEN (1<<SIN_BITS)
#define SIN_MASK (SIN_LEN-1)

#define TL_RES_LEN 256

#define TL_TAB_LEN (11*2*(TL_RES_LEN))

#define LFO_AM_TAB_ELEMENTS 210

#define FREQ_SH 16 /* 16.16 fixed point Freq calc */
#define EG_SH   16 /* 16.16 fixed point EG timing calc */
#define LFO_SH  24 /*  8.24 fixed point LFO calc */

#define FREQ_MASK (((uint32_t)1<<FREQ_SH)-1)

#define ENV_BITS 10
#define ENV_LEN  (1<<ENV_BITS)
#define ENV_STEP (128.0/ENV_LEN)

#define ENV_QUIET (TL_TAB_LEN>>5)

#define MAX_ATT_INDEX   ((1<<(ENV_BITS-2))-1) /*255*/
#define MIN_ATT_INDEX (0)
/* register number to channel number , slot offset */
#define SLOT1 0
#define SLOT2 1

/* Envelope Generator phases */

#define EG_DMP          5
#define EG_ATT          4
#define EG_DEC          3
#define EG_SUS          2
#define EG_REL          1
#define EG_OFF          0

const uint8_t ksl_shift[4] = {31, 2, 1, 0};

#define SC(db) (uint16_t)((db)*(1.0/ENV_STEP))
const uint32_t sl_tab[16]   = {
  SC( 0),SC( 1),SC( 2),SC(3 ),SC(4 ),SC(5 ),SC(6 ),SC( 7),
  SC( 8),SC( 9),SC(10),SC(11),SC(12),SC(13),SC(14),SC(15)
};
#undef SC

#define ML 2
const uint8_t  mul_tab[16]  = {
  /* 1/2, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,10,12,12,15,15 */
  ML/2, 1*ML, 2*ML, 3*ML, 4*ML, 5*ML, 6*ML, 7*ML,
  8*ML, 9*ML,10*ML,10*ML,12*ML,12*ML,15*ML,15*ML
};
#undef ML

const uint8_t eg_inc[15*RATE_STEPS] PROGMEM = {
  /* 0 */ 0,1, 0,1, 0,1, 0,1, /* rates 00..12 0 (increment by 0 or 1) */
  /* 1 */ 0,1, 0,1, 1,1, 0,1, /* rates 00..12 1 */
  /* 2 */ 0,1, 1,1, 0,1, 1,1, /* rates 00..12 2 */
  /* 3 */ 0,1, 1,1, 1,1, 1,1, /* rates 00..12 3 */

  /* 4 */ 1,1, 1,1, 1,1, 1,1, /* rate 13 0 (increment by 1) */
  /* 5 */ 1,1, 1,2, 1,1, 1,2, /* rate 13 1 */
  /* 6 */ 1,2, 1,2, 1,2, 1,2, /* rate 13 2 */
  /* 7 */ 1,2, 2,2, 1,2, 2,2, /* rate 13 3 */

  /* 8 */ 2,2, 2,2, 2,2, 2,2, /* rate 14 0 (increment by 2) */
  /* 9 */ 2,2, 2,4, 2,2, 2,4, /* rate 14 1 */
  /*10 */ 2,4, 2,4, 2,4, 2,4, /* rate 14 2 */
  /*11 */ 2,4, 4,4, 2,4, 4,4, /* rate 14 3 */

  /*12 */ 4,4, 4,4, 4,4, 4,4, /* rates 15 0, 15 1, 15 2, 15 3 (increment by 4) */
  /*13 */ 8,8, 8,8, 8,8, 8,8, /* rates 15 2, 15 3 for attack */
  /*14 */ 0,0, 0,0, 0,0, 0,0, /* infinity rates for attack and decay(s) */  
};

#define O(a) ((a)*RATE_STEPS)
const uint8_t eg_rate_select[16+64+16] PROGMEM = {
  /* 16 infinite time rates */
  O(14),O(14),O(14),O(14),O(14),O(14),O(14),O(14),
  O(14),O(14),O(14),O(14),O(14),O(14),O(14),O(14),

  /* rates 00-12 */
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),
  O( 0),O( 1),O( 2),O( 3),

  /* rate 13 */
  O( 4),O( 5),O( 6),O( 7),

  /* rate 14 */
  O( 8),O( 9),O(10),O(11),

  /* rate 15 */
  O(12),O(12),O(12),O(12),

  /* 16 dummy rates (same as 15 3) */
  O(12),O(12),O(12),O(12),O(12),O(12),O(12),O(12),
  O(12),O(12),O(12),O(12),O(12),O(12),O(12),O(12),
};
#undef O

#define O(a) ((a)*1)
const uint8_t eg_rate_shift[16+64+16] PROGMEM = {
  /* 16 infinite time rates */
  O(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),
  O(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),

  /* rates 00-12 */
  O(13),O(13),O(13),O(13),
  O(12),O(12),O(12),O(12),
  O(11),O(11),O(11),O(11),
  O(10),O(10),O(10),O(10),
  O( 9),O( 9),O( 9),O( 9),
  O( 8),O( 8),O( 8),O( 8),
  O( 7),O( 7),O( 7),O( 7),
  O( 6),O( 6),O( 6),O( 6),
  O( 5),O( 5),O( 5),O( 5),
  O( 4),O( 4),O( 4),O( 4),
  O( 3),O( 3),O( 3),O( 3),
  O( 2),O( 2),O( 2),O( 2),
  O( 1),O( 1),O( 1),O( 1),

  /* rate 13 */
  O( 0),O( 0),O( 0),O( 0),

  /* rate 14 */
  O( 0),O( 0),O( 0),O( 0),

  /* rate 15 */
  O( 0),O( 0),O( 0),O( 0),

  /* 16 dummy rates (same as 15 3) */
  O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),
  O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),
};
#undef O

const uint8_t lfo_am_table[LFO_AM_TAB_ELEMENTS] PROGMEM = {
  0,0,0,0,0,0,0,
  1,1,1,1,
  2,2,2,2,
  3,3,3,3,
  4,4,4,4,
  5,5,5,5,
  6,6,6,6,
  7,7,7,7,
  8,8,8,8,
  9,9,9,9,
  10,10,10,10,
  11,11,11,11,
  12,12,12,12,
  13,13,13,13,
  14,14,14,14,
  15,15,15,15,
  16,16,16,16,
  17,17,17,17,
  18,18,18,18,
  19,19,19,19,
  20,20,20,20,
  21,21,21,21,
  22,22,22,22,
  23,23,23,23,
  24,24,24,24,
  25,25,25,25,
  26,26,26,
  25,25,25,25,
  24,24,24,24,
  23,23,23,23,
  22,22,22,22,
  21,21,21,21,
  20,20,20,20,
  19,19,19,19,
  18,18,18,18,
  17,17,17,17,
  16,16,16,16,
  15,15,15,15,
  14,14,14,14,
  13,13,13,13,
  12,12,12,12,
  11,11,11,11,
  10,10,10,10,
  9,9,9,9,
  8,8,8,8,
  7,7,7,7,
  6,6,6,6,
  5,5,5,5,
  4,4,4,4,
  3,3,3,3,
  2,2,2,2,
  1,1,1,1
};
const int8_t  lfo_pm_table[8*8] PROGMEM = {
  /* FNUM2/FNUM = 0 00xxxxxx (0x0000) */
  0, 0, 0, 0, 0, 0, 0, 0,

  /* FNUM2/FNUM = 0 01xxxxxx (0x0040) */
  1, 0, 0, 0,-1, 0, 0, 0,

  /* FNUM2/FNUM = 0 10xxxxxx (0x0080) */
  2, 1, 0,-1,-2,-1, 0, 1,

  /* FNUM2/FNUM = 0 11xxxxxx (0x00C0) */
  3, 1, 0,-1,-3,-1, 0, 1,

  /* FNUM2/FNUM = 1 00xxxxxx (0x0100) */
  4, 2, 0,-2,-4,-2, 0, 2,

  /* FNUM2/FNUM = 1 01xxxxxx (0x0140) */
  5, 2, 0,-2,-5,-2, 0, 2,

  /* FNUM2/FNUM = 1 10xxxxxx (0x0180) */
  6, 3, 0,-3,-6,-3, 0, 3,

  /* FNUM2/FNUM = 1 11xxxxxx (0x01C0) */
  7, 3, 0,-3,-7,-3, 0, 3,
};

const int16_t tl_tab[TL_TAB_LEN] PROGMEM = {
    2042,-2042,2037,-2037,2031,-2031,2026,-2026,2020,-2020,2015,-2015,2010,-2010,2004,-2004,1999,-1999,1993,-1993,1988,-1988,1983,-1983,1977,-1977,1972,-1972,1966,-1966,1961,-1961,
    1956,-1956,1951,-1951,1945,-1945,1940,-1940,1935,-1935,1930,-1930,1924,-1924,1919,-1919,1914,-1914,1909,-1909,1904,-1904,1898,-1898,1893,-1893,1888,-1888,1883,-1883,1878,-1878,
    1873,-1873,1868,-1868,1863,-1863,1858,-1858,1853,-1853,1848,-1848,1843,-1843,1838,-1838,1833,-1833,1828,-1828,1823,-1823,1818,-1818,1813,-1813,1808,-1808,1803,-1803,1798,-1798,
    1794,-1794,1789,-1789,1784,-1784,1779,-1779,1774,-1774,1769,-1769,1765,-1765,1760,-1760,1755,-1755,1750,-1750,1746,-1746,1741,-1741,1736,-1736,1732,-1732,1727,-1727,1722,-1722,
    1717,-1717,1713,-1713,1708,-1708,1704,-1704,1699,-1699,1694,-1694,1690,-1690,1685,-1685,1681,-1681,1676,-1676,1672,-1672,1667,-1667,1663,-1663,1658,-1658,1654,-1654,1649,-1649,
    1645,-1645,1640,-1640,1636,-1636,1631,-1631,1627,-1627,1623,-1623,1618,-1618,1614,-1614,1609,-1609,1605,-1605,1601,-1601,1596,-1596,1592,-1592,1588,-1588,1584,-1584,1579,-1579,
    1575,-1575,1571,-1571,1566,-1566,1562,-1562,1558,-1558,1554,-1554,1550,-1550,1545,-1545,1541,-1541,1537,-1537,1533,-1533,1529,-1529,1525,-1525,1520,-1520,1516,-1516,1512,-1512,
    1508,-1508,1504,-1504,1500,-1500,1496,-1496,1492,-1492,1488,-1488,1484,-1484,1480,-1480,1476,-1476,1472,-1472,1468,-1468,1464,-1464,1460,-1460,1456,-1456,1452,-1452,1448,-1448,
    1444,-1444,1440,-1440,1436,-1436,1433,-1433,1429,-1429,1425,-1425,1421,-1421,1417,-1417,1413,-1413,1409,-1409,1406,-1406,1402,-1402,1398,-1398,1394,-1394,1391,-1391,1387,-1387,
    1383,-1383,1379,-1379,1376,-1376,1372,-1372,1368,-1368,1364,-1364,1361,-1361,1357,-1357,1353,-1353,1350,-1350,1346,-1346,1342,-1342,1339,-1339,1335,-1335,1332,-1332,1328,-1328,
    1324,-1324,1321,-1321,1317,-1317,1314,-1314,1310,-1310,1307,-1307,1303,-1303,1300,-1300,1296,-1296,1292,-1292,1289,-1289,1286,-1286,1282,-1282,1279,-1279,1275,-1275,1272,-1272,
    1268,-1268,1265,-1265,1261,-1261,1258,-1258,1255,-1255,1251,-1251,1248,-1248,1244,-1244,1241,-1241,1238,-1238,1234,-1234,1231,-1231,1228,-1228,1224,-1224,1221,-1221,1218,-1218,
    1214,-1214,1211,-1211,1208,-1208,1205,-1205,1201,-1201,1198,-1198,1195,-1195,1192,-1192,1188,-1188,1185,-1185,1182,-1182,1179,-1179,1176,-1176,1172,-1172,1169,-1169,1166,-1166,
    1163,-1163,1160,-1160,1157,-1157,1154,-1154,1150,-1150,1147,-1147,1144,-1144,1141,-1141,1138,-1138,1135,-1135,1132,-1132,1129,-1129,1126,-1126,1123,-1123,1120,-1120,1117,-1117,
    1114,-1114,1111,-1111,1108,-1108,1105,-1105,1102,-1102,1099,-1099,1096,-1096,1093,-1093,1090,-1090,1087,-1087,1084,-1084,1081,-1081,1078,-1078,1075,-1075,1072,-1072,1069,-1069,
    1066,-1066,1064,-1064,1061,-1061,1058,-1058,1055,-1055,1052,-1052,1049,-1049,1046,-1046,1044,-1044,1041,-1041,1038,-1038,1035,-1035,1032,-1032,1030,-1030,1027,-1027,1024,-1024,
    1021,-1021,1018,-1018,1016,-1016,1013,-1013,1010,-1010,1007,-1007,1005,-1005,1002,-1002,999,-999,997,-997,994,-994,991,-991,989,-989,986,-986,983,-983,981,-981,
    978,-978,975,-975,973,-973,970,-970,967,-967,965,-965,962,-962,960,-960,957,-957,954,-954,952,-952,949,-949,947,-947,944,-944,942,-942,939,-939,
    936,-936,934,-934,931,-931,929,-929,926,-926,924,-924,921,-921,919,-919,916,-916,914,-914,911,-911,909,-909,907,-907,904,-904,902,-902,899,-899,
    897,-897,894,-894,892,-892,890,-890,887,-887,885,-885,882,-882,880,-880,878,-878,875,-875,873,-873,870,-870,868,-868,866,-866,863,-863,861,-861,
    859,-859,856,-856,854,-854,852,-852,849,-849,847,-847,845,-845,843,-843,840,-840,838,-838,836,-836,834,-834,831,-831,829,-829,827,-827,825,-825,
    822,-822,820,-820,818,-818,816,-816,813,-813,811,-811,809,-809,807,-807,805,-805,803,-803,800,-800,798,-798,796,-796,794,-794,792,-792,790,-790,
    787,-787,785,-785,783,-783,781,-781,779,-779,777,-777,775,-775,773,-773,771,-771,769,-769,766,-766,764,-764,762,-762,760,-760,758,-758,756,-756,
    754,-754,752,-752,750,-750,748,-748,746,-746,744,-744,742,-742,740,-740,738,-738,736,-736,734,-734,732,-732,730,-730,728,-728,726,-726,724,-724,
    722,-722,720,-720,718,-718,716,-716,714,-714,712,-712,710,-710,709,-709,707,-707,705,-705,703,-703,701,-701,699,-699,697,-697,695,-695,693,-693,
    692,-692,690,-690,688,-688,686,-686,684,-684,682,-682,680,-680,679,-679,677,-677,675,-675,673,-673,671,-671,669,-669,668,-668,666,-666,664,-664,
    662,-662,660,-660,659,-659,657,-657,655,-655,653,-653,652,-652,650,-650,648,-648,646,-646,644,-644,643,-643,641,-641,639,-639,638,-638,636,-636,
    634,-634,632,-632,631,-631,629,-629,627,-627,626,-626,624,-624,622,-622,621,-621,619,-619,617,-617,616,-616,614,-614,612,-612,611,-611,609,-609,
    607,-607,606,-606,604,-604,602,-602,601,-601,599,-599,597,-597,596,-596,594,-594,593,-593,591,-591,589,-589,588,-588,586,-586,585,-585,583,-583,
    581,-581,580,-580,578,-578,577,-577,575,-575,574,-574,572,-572,571,-571,569,-569,567,-567,566,-566,564,-564,563,-563,561,-561,560,-560,558,-558,
    557,-557,555,-555,554,-554,552,-552,551,-551,549,-549,548,-548,546,-546,545,-545,543,-543,542,-542,540,-540,539,-539,538,-538,536,-536,535,-535,
    533,-533,532,-532,530,-530,529,-529,527,-527,526,-526,525,-525,523,-523,522,-522,520,-520,519,-519,518,-518,516,-516,515,-515,513,-513,512,-512,
    511,-511,509,-509,508,-508,506,-506,505,-505,504,-504,502,-502,501,-501,500,-500,498,-498,497,-497,496,-496,494,-494,493,-493,492,-492,490,-490,
    489,-489,488,-488,486,-486,485,-485,484,-484,482,-482,481,-481,480,-480,478,-478,477,-477,476,-476,475,-475,473,-473,472,-472,471,-471,470,-470,
    468,-468,467,-467,466,-466,464,-464,463,-463,462,-462,461,-461,459,-459,458,-458,457,-457,456,-456,454,-454,453,-453,452,-452,451,-451,450,-450,
    448,-448,447,-447,446,-446,445,-445,444,-444,442,-442,441,-441,440,-440,439,-439,438,-438,436,-436,435,-435,434,-434,433,-433,432,-432,431,-431,
    429,-429,428,-428,427,-427,426,-426,425,-425,424,-424,422,-422,421,-421,420,-420,419,-419,418,-418,417,-417,416,-416,415,-415,413,-413,412,-412,
    411,-411,410,-410,409,-409,408,-408,407,-407,406,-406,405,-405,403,-403,402,-402,401,-401,400,-400,399,-399,398,-398,397,-397,396,-396,395,-395,
    394,-394,393,-393,392,-392,391,-391,389,-389,388,-388,387,-387,386,-386,385,-385,384,-384,383,-383,382,-382,381,-381,380,-380,379,-379,378,-378,
    377,-377,376,-376,375,-375,374,-374,373,-373,372,-372,371,-371,370,-370,369,-369,368,-368,367,-367,366,-366,365,-365,364,-364,363,-363,362,-362,
    361,-361,360,-360,359,-359,358,-358,357,-357,356,-356,355,-355,354,-354,353,-353,352,-352,351,-351,350,-350,350,-350,349,-349,348,-348,347,-347,
    346,-346,345,-345,344,-344,343,-343,342,-342,341,-341,340,-340,339,-339,338,-338,337,-337,337,-337,336,-336,335,-335,334,-334,333,-333,332,-332,
    331,-331,330,-330,329,-329,328,-328,328,-328,327,-327,326,-326,325,-325,324,-324,323,-323,322,-322,321,-321,321,-321,320,-320,319,-319,318,-318,
    317,-317,316,-316,315,-315,314,-314,314,-314,313,-313,312,-312,311,-311,310,-310,309,-309,309,-309,308,-308,307,-307,306,-306,305,-305,304,-304,
    304,-304,303,-303,302,-302,301,-301,300,-300,300,-300,299,-299,298,-298,297,-297,296,-296,296,-296,295,-295,294,-294,293,-293,292,-292,292,-292,
    291,-291,290,-290,289,-289,288,-288,288,-288,287,-287,286,-286,285,-285,285,-285,284,-284,283,-283,282,-282,281,-281,281,-281,280,-280,279,-279,
    278,-278,278,-278,277,-277,276,-276,275,-275,275,-275,274,-274,273,-273,272,-272,272,-272,271,-271,270,-270,270,-270,269,-269,268,-268,267,-267,
    267,-267,266,-266,265,-265,264,-264,264,-264,263,-263,262,-262,262,-262,261,-261,260,-260,259,-259,259,-259,258,-258,257,-257,257,-257,256,-256,
    255,-255,255,-255,254,-254,253,-253,253,-253,252,-252,251,-251,251,-251,250,-250,249,-249,248,-248,248,-248,247,-247,246,-246,246,-246,245,-245,
    244,-244,244,-244,243,-243,243,-243,242,-242,241,-241,241,-241,240,-240,239,-239,239,-239,238,-238,237,-237,237,-237,236,-236,235,-235,235,-235,
    234,-234,233,-233,233,-233,232,-232,232,-232,231,-231,230,-230,230,-230,229,-229,228,-228,228,-228,227,-227,227,-227,226,-226,225,-225,225,-225,
    224,-224,224,-224,223,-223,222,-222,222,-222,221,-221,221,-221,220,-220,219,-219,219,-219,218,-218,218,-218,217,-217,216,-216,216,-216,215,-215,
    215,-215,214,-214,214,-214,213,-213,212,-212,212,-212,211,-211,211,-211,210,-210,210,-210,209,-209,208,-208,208,-208,207,-207,207,-207,206,-206,
    206,-206,205,-205,204,-204,204,-204,203,-203,203,-203,202,-202,202,-202,201,-201,201,-201,200,-200,200,-200,199,-199,198,-198,198,-198,197,-197,
    197,-197,196,-196,196,-196,195,-195,195,-195,194,-194,194,-194,193,-193,193,-193,192,-192,192,-192,191,-191,191,-191,190,-190,190,-190,189,-189,
    189,-189,188,-188,188,-188,187,-187,186,-186,186,-186,185,-185,185,-185,184,-184,184,-184,183,-183,183,-183,182,-182,182,-182,182,-182,181,-181,
    181,-181,180,-180,180,-180,179,-179,179,-179,178,-178,178,-178,177,-177,177,-177,176,-176,176,-176,175,-175,175,-175,174,-174,174,-174,173,-173,
    173,-173,172,-172,172,-172,171,-171,171,-171,171,-171,170,-170,170,-170,169,-169,169,-169,168,-168,168,-168,167,-167,167,-167,166,-166,166,-166,
    166,-166,165,-165,165,-165,164,-164,164,-164,163,-163,163,-163,162,-162,162,-162,162,-162,161,-161,161,-161,160,-160,160,-160,159,-159,159,-159,
    159,-159,158,-158,158,-158,157,-157,157,-157,156,-156,156,-156,156,-156,155,-155,155,-155,154,-154,154,-154,153,-153,153,-153,153,-153,152,-152,
    152,-152,151,-151,151,-151,151,-151,150,-150,150,-150,149,-149,149,-149,149,-149,148,-148,148,-148,147,-147,147,-147,147,-147,146,-146,146,-146,
    145,-145,145,-145,145,-145,144,-144,144,-144,143,-143,143,-143,143,-143,142,-142,142,-142,141,-141,141,-141,141,-141,140,-140,140,-140,140,-140,
    139,-139,139,-139,138,-138,138,-138,138,-138,137,-137,137,-137,137,-137,136,-136,136,-136,135,-135,135,-135,135,-135,134,-134,134,-134,134,-134,
    133,-133,133,-133,133,-133,132,-132,132,-132,132,-132,131,-131,131,-131,130,-130,130,-130,130,-130,129,-129,129,-129,129,-129,128,-128,128,-128};
OPLL_CH P_CH[9]; // 9 Channels
uint8_t instvol_r[0]; // instrument/volume (or volume/volume in perc. mode)

uint32_t eg_cnt;           // global envelope generator counter
uint32_t eg_timer;         // global envelope generator counter at chipclock/72
uint32_t eg_timer_add;     // step of eg_timer
uint32_t eg_timer_overflow; // EG overflow (every 1 sample)

uint8_t  rhythm; // rhythm mode

// LFO
uint32_t LFO_AM;
int32_t  LFO_PM;
uint32_t lfo_am_cnt;
uint32_t lfo_am_inc;
uint32_t lfo_pm_cnt;
uint32_t lfo_pm_inc;

uint32_t noise_rng;  // 23-bit LFSR for noise
uint32_t noise_p;    // current noise 'phase'
uint32_t noise_f;    // current noise period

/*
 * 0 - user instrument
 * 1-15 - fixed instruments
 * 16 - bass drum settings
 * 17-18 - other percussion instruments
 */

uint8_t  inst_tab[19][8];
const uint8_t default_inst_tab[19][8] PROGMEM = {
/* MULT  MULT modTL DcDmFb AR/DR AR/DR SL/RR SL/RR */
/*   0     1     2     3     4     5     6    7    */
  {0x49, 0x4c, 0x4c, 0x12, 0x00, 0x00, 0x00, 0x00 },  //0

  {0x61, 0x61, 0x1e, 0x17, 0xf0, 0x78, 0x00, 0x17 },  //1
  {0x13, 0x41, 0x1e, 0x0d, 0xd7, 0xf7, 0x13, 0x13 },  //2
  {0x13, 0x01, 0x99, 0x04, 0xf2, 0xf4, 0x11, 0x23 },  //3
  {0x21, 0x61, 0x1b, 0x07, 0xaf, 0x64, 0x40, 0x27 },  //4

//{0x22, 0x21, 0x1e, 0x09, 0xf0, 0x76, 0x08, 0x28 },    //5
  {0x22, 0x21, 0x1e, 0x06, 0xf0, 0x75, 0x08, 0x18 },  //5

//{0x31, 0x22, 0x16, 0x09, 0x90, 0x7f, 0x00, 0x08 },    //6
  {0x31, 0x22, 0x16, 0x05, 0x90, 0x71, 0x00, 0x13 },  //6

  {0x21, 0x61, 0x1d, 0x07, 0x82, 0x80, 0x10, 0x17 },  //7
  {0x23, 0x21, 0x2d, 0x16, 0xc0, 0x70, 0x07, 0x07 },  //8
  {0x61, 0x61, 0x1b, 0x06, 0x64, 0x65, 0x10, 0x17 },  //9

//{0x61, 0x61, 0x0c, 0x08, 0x85, 0xa0, 0x79, 0x07 },    //A
  {0x61, 0x61, 0x0c, 0x18, 0x85, 0xf0, 0x70, 0x07 },  //A

  {0x23, 0x01, 0x07, 0x11, 0xf0, 0xa4, 0x00, 0x22 },  //B
  {0x97, 0xc1, 0x24, 0x07, 0xff, 0xf8, 0x22, 0x12 },  //C

//{0x61, 0x10, 0x0c, 0x08, 0xf2, 0xc4, 0x40, 0xc8 },    //D
  {0x61, 0x10, 0x0c, 0x05, 0xf2, 0xf4, 0x40, 0x44 },  //D

  {0x01, 0x01, 0x55, 0x03, 0xf3, 0x92, 0xf3, 0xf3 },  //E
  {0x61, 0x41, 0x89, 0x03, 0xf1, 0xf4, 0xf0, 0x13 },  //F

/* drum instruments definitions */
/* MULTI MULTI modTL  xxx  AR/DR AR/DR SL/RR SL/RR */
/*   0     1     2     3     4     5     6    7    */
  {0x01, 0x01, 0x16, 0x00, 0xfd, 0xf8, 0x2f, 0x6d },/* BD(multi verified, modTL verified, mod env - verified(close), carr. env verifed) */
  {0x01, 0x01, 0x00, 0x00, 0xd8, 0xd8, 0xf9, 0xf8 },/* HH(multi verified), SD(multi not used) */
  {0x05, 0x01, 0x00, 0x00, 0xf8, 0xba, 0x49, 0x55 },/* TOM(multi,env verified), TOP CYM(multi verified, env verified) */
  
};


/*
 * The following tables are generated by the following python program:

"""
Table generator for Master FM
"""
from math import log, log10, pow, sin
from itertools import chain

PI = 3.14159265358979323846

def DV(f):
    #return float(f/(0.1875/1.0)) # 3dB/octave to 6dB/octave
    return int(f / (0.1875 / 1.0))  # 3dB/octave to 6dB/octave

SIN_BITS = 10
SIN_LEN = (1<<SIN_BITS)
ENV_BITS = 10
ENV_LEN = (1<<ENV_BITS)
ENV_STEP = (128.0/ENV_LEN)
TL_RES_LEN = 256
TL_TAB_LEN = (11*2*(TL_RES_LEN))
FREQ_SH = 16

def ym_sin(x):
    m = sin(((x * 2) + 1) * PI / SIN_LEN)
    o = 8.0*log(1.0/abs(m))/log(2.0)
    o = o / (ENV_STEP/4)
    n = int(2.0*o)
    if (n&1):
        n = (n>>1)+1;
    else:
        n = n>>1
    return n*2 + (0 if m>=0 else 1)

sin_tab = [ym_sin(x) for x in range(SIN_LEN)]
sin_tab.extend([TL_TAB_LEN if x & (1<<(SIN_BITS-1)) else ym_sin(x) for x in range(SIN_LEN)])

fn_tab = [i * (64 << (FREQ_SH-10)) for i in range(1024)]

def tl_entry(x):
    n = int((1<<16)/pow(2, (x+1) * (ENV_STEP/4.0) / 8.0)) >> 4

    if n&1:
        n = (n>>1)+1
    else:
        n = n>>1
    return n, -n

tl_tab = list(chain(* (tl_entry(x) for x in range(1024))))

ksl_tab = [DV(x) for x in
           [
               # Octave 0
               0.000, 0.000, 0.000, 0.000,
               0.000, 0.000, 0.000, 0.000,
               0.000, 0.000, 0.000, 0.000,
               0.000, 0.000, 0.000, 0.000,
               # Octave 1
               0.000, 0.000, 0.000, 0.000,
               0.000, 0.000, 0.000, 0.000,
               0.000, 0.750, 1.125, 1.500,
               1.875, 2.250, 2.625, 3.000,
               # Octave 2
               0.000, 0.000, 0.000, 0.000,
               0.000, 1.125, 1.875, 2.625,
               3.000, 3.750, 4.125, 4.500,
               4.875, 5.250, 5.625, 6.000,
               # Octave 3
               0.000, 0.000, 0.000, 1.875,
               3.000, 4.125, 4.875, 5.625,
               6.000, 6.750, 7.125, 7.500,
               7.875, 8.250, 8.625, 9.000,
               # Octave 4
               0.000, 0.000, 3.000, 4.875,
               6.000, 7.125, 7.875, 8.625,
               9.000, 9.750,10.125,10.500,
               10.875,11.250,11.625,12.000,
               # Octave 5
               0.000, 3.000, 6.000, 7.875,
               9.000,10.125,10.875,11.625,
               12.000,12.750,13.125,13.500,
               13.875,14.250,14.625,15.000,
               # Octave 6
               0.000, 6.000, 9.000,10.875,
               12.000,13.125,13.875,14.625,
               15.000,15.750,16.125,16.500,
               16.875,17.250,17.625,18.000,
               # Octave 7
               0.000, 9.000,12.000,13.875,
               15.000,16.125,16.875,17.625,
               18.000,18.750,19.125,19.500,
               19.875,20.250,20.625,21.000
    ]]


def get_table_sizes(table):
    if isinstance(table, list):
        inner = get_table_sizes(table[0])
        if inner:
            return [len(table), ]+inner
        return [len(table), ]
    return None

def emit_table_contents(table, indent=4):
    return "{{{}}}".format(
        ",".join("\n"+(" "*indent)+emit_table_contents(item, indent=indent+4) if isinstance(item, list)
                 else "\n"+(" "*indent)+str(item) if (index > 0 and index % 32 == 0) else
                 str(item)
                 for index, item in enumerate(table))
    )
def emit_nested_table(type, tableName, table):
    return """const {type} {tableName}{sizes} PROGMEM = {contents};""".format(
        type = type,
        tableName = tableName,
        sizes = "".join("[{}]".format(size) for size in get_table_sizes(table)),
        contents = emit_table_contents(table)
    )


print("""
{sin_tab}

{fn_tab}

{ksl_tab}

{tl_tab}
""".format(
    sin_tab=emit_nested_table("uint16_t", "sin_tab", sin_tab),
    fn_tab =emit_nested_table("uint32_t", "fn_tab", fn_tab),
    ksl_tab=emit_nested_table("uint8_t", "ksl_tab", ksl_tab),
    tl_tab=emit_nested_table("int16_t", "tl_tab", tl_tab)
))
 
 */

const uint16_t sin_tab[2048] PROGMEM = {4274,3462,3086,2838,2652,2504,2380,2274,2182,2100,2026,1958,1898,1840,1788,1738,1692,1650,1608,1570,1534,1498,1464,1434,1402,1374,1344,1318,1292,1266,1242,1218,
    1196,1174,1152,1132,1112,1092,1072,1054,1036,1018,1002,984,968,952,936,922,906,892,878,864,850,836,822,810,798,784,772,760,750,738,726,716,
    704,694,682,672,662,652,642,632,622,614,604,594,586,578,568,560,552,542,534,526,518,510,502,496,488,480,472,466,458,452,444,438,
    430,424,418,410,404,398,392,386,380,374,368,362,356,350,344,338,334,328,322,318,312,306,302,296,292,286,282,276,272,268,262,258,
    254,250,244,240,236,232,228,224,220,216,212,208,204,200,196,192,188,184,182,178,174,170,166,164,160,156,154,150,148,144,140,138,
    134,132,128,126,124,120,118,114,112,110,106,104,102,98,96,94,92,90,86,84,82,80,78,76,74,72,70,68,66,64,62,60,
    58,56,54,52,50,48,46,46,44,42,40,40,38,36,34,34,32,30,30,28,26,26,24,24,22,20,20,18,18,16,16,14,
    14,14,12,12,10,10,10,8,8,8,6,6,6,4,4,4,4,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,14,14,
    14,16,16,18,18,20,20,22,24,24,26,26,28,30,30,32,34,34,36,38,40,40,42,44,46,46,48,50,52,54,56,58,
    60,62,64,66,68,70,72,74,76,78,80,82,84,86,90,92,94,96,98,102,104,106,110,112,114,118,120,124,126,128,132,134,
    138,140,144,148,150,154,156,160,164,166,170,174,178,182,184,188,192,196,200,204,208,212,216,220,224,228,232,236,240,244,250,254,
    258,262,268,272,276,282,286,292,296,302,306,312,318,322,328,334,338,344,350,356,362,368,374,380,386,392,398,404,410,418,424,430,
    438,444,452,458,466,472,480,488,496,502,510,518,526,534,542,552,560,568,578,586,594,604,614,622,632,642,652,662,672,682,694,704,
    716,726,738,750,760,772,784,798,810,822,836,850,864,878,892,906,922,936,952,968,984,1002,1018,1036,1054,1072,1092,1112,1132,1152,1174,1196,
    1218,1242,1266,1292,1318,1344,1374,1402,1434,1464,1498,1534,1570,1608,1650,1692,1738,1788,1840,1898,1958,2026,2100,2182,2274,2380,2504,2652,2838,3086,3462,4274,
    4275,3463,3087,2839,2653,2505,2381,2275,2183,2101,2027,1959,1899,1841,1789,1739,1693,1651,1609,1571,1535,1499,1465,1435,1403,1375,1345,1319,1293,1267,1243,1219,
    1197,1175,1153,1133,1113,1093,1073,1055,1037,1019,1003,985,969,953,937,923,907,893,879,865,851,837,823,811,799,785,773,761,751,739,727,717,
    705,695,683,673,663,653,643,633,623,615,605,595,587,579,569,561,553,543,535,527,519,511,503,497,489,481,473,467,459,453,445,439,
    431,425,419,411,405,399,393,387,381,375,369,363,357,351,345,339,335,329,323,319,313,307,303,297,293,287,283,277,273,269,263,259,
    255,251,245,241,237,233,229,225,221,217,213,209,205,201,197,193,189,185,183,179,175,171,167,165,161,157,155,151,149,145,141,139,
    135,133,129,127,125,121,119,115,113,111,107,105,103,99,97,95,93,91,87,85,83,81,79,77,75,73,71,69,67,65,63,61,
    59,57,55,53,51,49,47,47,45,43,41,41,39,37,35,35,33,31,31,29,27,27,25,25,23,21,21,19,19,17,17,15,
    15,15,13,13,11,11,11,9,9,9,7,7,7,5,5,5,5,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,5,5,5,5,7,7,7,9,9,9,11,11,11,13,13,15,15,
    15,17,17,19,19,21,21,23,25,25,27,27,29,31,31,33,35,35,37,39,41,41,43,45,47,47,49,51,53,55,57,59,
    61,63,65,67,69,71,73,75,77,79,81,83,85,87,91,93,95,97,99,103,105,107,111,113,115,119,121,125,127,129,133,135,
    139,141,145,149,151,155,157,161,165,167,171,175,179,183,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,251,255,
    259,263,269,273,277,283,287,293,297,303,307,313,319,323,329,335,339,345,351,357,363,369,375,381,387,393,399,405,411,419,425,431,
    439,445,453,459,467,473,481,489,497,503,511,519,527,535,543,553,561,569,579,587,595,605,615,623,633,643,653,663,673,683,695,705,
    717,727,739,751,761,773,785,799,811,823,837,851,865,879,893,907,923,937,953,969,985,1003,1019,1037,1055,1073,1093,1113,1133,1153,1175,1197,
    1219,1243,1267,1293,1319,1345,1375,1403,1435,1465,1499,1535,1571,1609,1651,1693,1739,1789,1841,1899,1959,2027,2101,2183,2275,2381,2505,2653,2839,3087,3463,4275,
    4274,3462,3086,2838,2652,2504,2380,2274,2182,2100,2026,1958,1898,1840,1788,1738,1692,1650,1608,1570,1534,1498,1464,1434,1402,1374,1344,1318,1292,1266,1242,1218,
    1196,1174,1152,1132,1112,1092,1072,1054,1036,1018,1002,984,968,952,936,922,906,892,878,864,850,836,822,810,798,784,772,760,750,738,726,716,
    704,694,682,672,662,652,642,632,622,614,604,594,586,578,568,560,552,542,534,526,518,510,502,496,488,480,472,466,458,452,444,438,
    430,424,418,410,404,398,392,386,380,374,368,362,356,350,344,338,334,328,322,318,312,306,302,296,292,286,282,276,272,268,262,258,
    254,250,244,240,236,232,228,224,220,216,212,208,204,200,196,192,188,184,182,178,174,170,166,164,160,156,154,150,148,144,140,138,
    134,132,128,126,124,120,118,114,112,110,106,104,102,98,96,94,92,90,86,84,82,80,78,76,74,72,70,68,66,64,62,60,
    58,56,54,52,50,48,46,46,44,42,40,40,38,36,34,34,32,30,30,28,26,26,24,24,22,20,20,18,18,16,16,14,
    14,14,12,12,10,10,10,8,8,8,6,6,6,4,4,4,4,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,4,4,4,4,6,6,6,8,8,8,10,10,10,12,12,14,14,
    14,16,16,18,18,20,20,22,24,24,26,26,28,30,30,32,34,34,36,38,40,40,42,44,46,46,48,50,52,54,56,58,
    60,62,64,66,68,70,72,74,76,78,80,82,84,86,90,92,94,96,98,102,104,106,110,112,114,118,120,124,126,128,132,134,
    138,140,144,148,150,154,156,160,164,166,170,174,178,182,184,188,192,196,200,204,208,212,216,220,224,228,232,236,240,244,250,254,
    258,262,268,272,276,282,286,292,296,302,306,312,318,322,328,334,338,344,350,356,362,368,374,380,386,392,398,404,410,418,424,430,
    438,444,452,458,466,472,480,488,496,502,510,518,526,534,542,552,560,568,578,586,594,604,614,622,632,642,652,662,672,682,694,704,
    716,726,738,750,760,772,784,798,810,822,836,850,864,878,892,906,922,936,952,968,984,1002,1018,1036,1054,1072,1092,1112,1132,1152,1174,1196,
    1218,1242,1266,1292,1318,1344,1374,1402,1434,1464,1498,1534,1570,1608,1650,1692,1738,1788,1840,1898,1958,2026,2100,2182,2274,2380,2504,2652,2838,3086,3462,4274,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,
    5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632,5632};

const uint8_t ksl_tab[128] PROGMEM = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,8,10,12,14,16,
    0,0,0,0,0,6,10,14,16,20,22,24,26,28,30,32,0,0,0,10,16,22,26,30,32,36,38,40,42,44,46,48,
    0,0,16,26,32,38,42,46,48,52,54,56,58,60,62,64,0,16,32,42,48,54,58,62,64,68,70,72,74,76,78,80,
    0,32,48,58,64,70,74,78,80,84,86,88,90,92,94,96,0,48,64,74,80,86,90,94,96,100,102,104,106,108,110,112};


// fnumber->increment counter
const uint32_t fn_tab[1024] PROGMEM = {0,4096,8192,12288,16384,20480,24576,28672,32768,36864,40960,45056,49152,53248,57344,61440,65536,69632,73728,77824,81920,86016,90112,94208,98304,102400,106496,110592,114688,118784,122880,126976,
    131072,135168,139264,143360,147456,151552,155648,159744,163840,167936,172032,176128,180224,184320,188416,192512,196608,200704,204800,208896,212992,217088,221184,225280,229376,233472,237568,241664,245760,249856,253952,258048,
    262144,266240,270336,274432,278528,282624,286720,290816,294912,299008,303104,307200,311296,315392,319488,323584,327680,331776,335872,339968,344064,348160,352256,356352,360448,364544,368640,372736,376832,380928,385024,389120,
    393216,397312,401408,405504,409600,413696,417792,421888,425984,430080,434176,438272,442368,446464,450560,454656,458752,462848,466944,471040,475136,479232,483328,487424,491520,495616,499712,503808,507904,512000,516096,520192,
    524288,528384,532480,536576,540672,544768,548864,552960,557056,561152,565248,569344,573440,577536,581632,585728,589824,593920,598016,602112,606208,610304,614400,618496,622592,626688,630784,634880,638976,643072,647168,651264,
    655360,659456,663552,667648,671744,675840,679936,684032,688128,692224,696320,700416,704512,708608,712704,716800,720896,724992,729088,733184,737280,741376,745472,749568,753664,757760,761856,765952,770048,774144,778240,782336,
    786432,790528,794624,798720,802816,806912,811008,815104,819200,823296,827392,831488,835584,839680,843776,847872,851968,856064,860160,864256,868352,872448,876544,880640,884736,888832,892928,897024,901120,905216,909312,913408,
    917504,921600,925696,929792,933888,937984,942080,946176,950272,954368,958464,962560,966656,970752,974848,978944,983040,987136,991232,995328,999424,1003520,1007616,1011712,1015808,1019904,1024000,1028096,1032192,1036288,1040384,1044480,
    1048576,1052672,1056768,1060864,1064960,1069056,1073152,1077248,1081344,1085440,1089536,1093632,1097728,1101824,1105920,1110016,1114112,1118208,1122304,1126400,1130496,1134592,1138688,1142784,1146880,1150976,1155072,1159168,1163264,1167360,1171456,1175552,
    1179648,1183744,1187840,1191936,1196032,1200128,1204224,1208320,1212416,1216512,1220608,1224704,1228800,1232896,1236992,1241088,1245184,1249280,1253376,1257472,1261568,1265664,1269760,1273856,1277952,1282048,1286144,1290240,1294336,1298432,1302528,1306624,
    1310720,1314816,1318912,1323008,1327104,1331200,1335296,1339392,1343488,1347584,1351680,1355776,1359872,1363968,1368064,1372160,1376256,1380352,1384448,1388544,1392640,1396736,1400832,1404928,1409024,1413120,1417216,1421312,1425408,1429504,1433600,1437696,
    1441792,1445888,1449984,1454080,1458176,1462272,1466368,1470464,1474560,1478656,1482752,1486848,1490944,1495040,1499136,1503232,1507328,1511424,1515520,1519616,1523712,1527808,1531904,1536000,1540096,1544192,1548288,1552384,1556480,1560576,1564672,1568768,
    1572864,1576960,1581056,1585152,1589248,1593344,1597440,1601536,1605632,1609728,1613824,1617920,1622016,1626112,1630208,1634304,1638400,1642496,1646592,1650688,1654784,1658880,1662976,1667072,1671168,1675264,1679360,1683456,1687552,1691648,1695744,1699840,
    1703936,1708032,1712128,1716224,1720320,1724416,1728512,1732608,1736704,1740800,1744896,1748992,1753088,1757184,1761280,1765376,1769472,1773568,1777664,1781760,1785856,1789952,1794048,1798144,1802240,1806336,1810432,1814528,1818624,1822720,1826816,1830912,
    1835008,1839104,1843200,1847296,1851392,1855488,1859584,1863680,1867776,1871872,1875968,1880064,1884160,1888256,1892352,1896448,1900544,1904640,1908736,1912832,1916928,1921024,1925120,1929216,1933312,1937408,1941504,1945600,1949696,1953792,1957888,1961984,
    1966080,1970176,1974272,1978368,1982464,1986560,1990656,1994752,1998848,2002944,2007040,2011136,2015232,2019328,2023424,2027520,2031616,2035712,2039808,2043904,2048000,2052096,2056192,2060288,2064384,2068480,2072576,2076672,2080768,2084864,2088960,2093056,
    2097152,2101248,2105344,2109440,2113536,2117632,2121728,2125824,2129920,2134016,2138112,2142208,2146304,2150400,2154496,2158592,2162688,2166784,2170880,2174976,2179072,2183168,2187264,2191360,2195456,2199552,2203648,2207744,2211840,2215936,2220032,2224128,
    2228224,2232320,2236416,2240512,2244608,2248704,2252800,2256896,2260992,2265088,2269184,2273280,2277376,2281472,2285568,2289664,2293760,2297856,2301952,2306048,2310144,2314240,2318336,2322432,2326528,2330624,2334720,2338816,2342912,2347008,2351104,2355200,
    2359296,2363392,2367488,2371584,2375680,2379776,2383872,2387968,2392064,2396160,2400256,2404352,2408448,2412544,2416640,2420736,2424832,2428928,2433024,2437120,2441216,2445312,2449408,2453504,2457600,2461696,2465792,2469888,2473984,2478080,2482176,2486272,
    2490368,2494464,2498560,2502656,2506752,2510848,2514944,2519040,2523136,2527232,2531328,2535424,2539520,2543616,2547712,2551808,2555904,2560000,2564096,2568192,2572288,2576384,2580480,2584576,2588672,2592768,2596864,2600960,2605056,2609152,2613248,2617344,
    2621440,2625536,2629632,2633728,2637824,2641920,2646016,2650112,2654208,2658304,2662400,2666496,2670592,2674688,2678784,2682880,2686976,2691072,2695168,2699264,2703360,2707456,2711552,2715648,2719744,2723840,2727936,2732032,2736128,2740224,2744320,2748416,
    2752512,2756608,2760704,2764800,2768896,2772992,2777088,2781184,2785280,2789376,2793472,2797568,2801664,2805760,2809856,2813952,2818048,2822144,2826240,2830336,2834432,2838528,2842624,2846720,2850816,2854912,2859008,2863104,2867200,2871296,2875392,2879488,
    2883584,2887680,2891776,2895872,2899968,2904064,2908160,2912256,2916352,2920448,2924544,2928640,2932736,2936832,2940928,2945024,2949120,2953216,2957312,2961408,2965504,2969600,2973696,2977792,2981888,2985984,2990080,2994176,2998272,3002368,3006464,3010560,
    3014656,3018752,3022848,3026944,3031040,3035136,3039232,3043328,3047424,3051520,3055616,3059712,3063808,3067904,3072000,3076096,3080192,3084288,3088384,3092480,3096576,3100672,3104768,3108864,3112960,3117056,3121152,3125248,3129344,3133440,3137536,3141632,
    3145728,3149824,3153920,3158016,3162112,3166208,3170304,3174400,3178496,3182592,3186688,3190784,3194880,3198976,3203072,3207168,3211264,3215360,3219456,3223552,3227648,3231744,3235840,3239936,3244032,3248128,3252224,3256320,3260416,3264512,3268608,3272704,
    3276800,3280896,3284992,3289088,3293184,3297280,3301376,3305472,3309568,3313664,3317760,3321856,3325952,3330048,3334144,3338240,3342336,3346432,3350528,3354624,3358720,3362816,3366912,3371008,3375104,3379200,3383296,3387392,3391488,3395584,3399680,3403776,
    3407872,3411968,3416064,3420160,3424256,3428352,3432448,3436544,3440640,3444736,3448832,3452928,3457024,3461120,3465216,3469312,3473408,3477504,3481600,3485696,3489792,3493888,3497984,3502080,3506176,3510272,3514368,3518464,3522560,3526656,3530752,3534848,
    3538944,3543040,3547136,3551232,3555328,3559424,3563520,3567616,3571712,3575808,3579904,3584000,3588096,3592192,3596288,3600384,3604480,3608576,3612672,3616768,3620864,3624960,3629056,3633152,3637248,3641344,3645440,3649536,3653632,3657728,3661824,3665920,
    3670016,3674112,3678208,3682304,3686400,3690496,3694592,3698688,3702784,3706880,3710976,3715072,3719168,3723264,3727360,3731456,3735552,3739648,3743744,3747840,3751936,3756032,3760128,3764224,3768320,3772416,3776512,3780608,3784704,3788800,3792896,3796992,
    3801088,3805184,3809280,3813376,3817472,3821568,3825664,3829760,3833856,3837952,3842048,3846144,3850240,3854336,3858432,3862528,3866624,3870720,3874816,3878912,3883008,3887104,3891200,3895296,3899392,3903488,3907584,3911680,3915776,3919872,3923968,3928064,
    3932160,3936256,3940352,3944448,3948544,3952640,3956736,3960832,3964928,3969024,3973120,3977216,3981312,3985408,3989504,3993600,3997696,4001792,4005888,4009984,4014080,4018176,4022272,4026368,4030464,4034560,4038656,4042752,4046848,4050944,4055040,4059136,
    4063232,4067328,4071424,4075520,4079616,4083712,4087808,4091904,4096000,4100096,4104192,4108288,4112384,4116480,4120576,4124672,4128768,4132864,4136960,4141056,4145152,4149248,4153344,4157440,4161536,4165632,4169728,4173824,4177920,4182016,4186112,4190208};

uint8_t  address; // address register

int16_t output[2]; // 9-bit, actually

#define SLOT7_1 (&P_CH[7].SLOT[SLOT1])
#define SLOT7_2 (&P_CH[7].SLOT[SLOT2])
#define SLOT8_1 (&P_CH[8].SLOT[SLOT1])
#define SLOT8_2 (&P_CH[8].SLOT[SLOT2])

inline int limit(int val, int _max, int _min) {
  return min(max(val, _min), _max);
}

void advance_lfo() {
  lfo_am_cnt += lfo_am_inc;
  if (lfo_am_cnt >= ((uint32_t)LFO_AM_TAB_ELEMENTS<<LFO_SH)) {
    lfo_am_cnt -= ((uint32_t)LFO_AM_TAB_ELEMENTS<<LFO_SH);
  }
  LFO_AM = lfo_am_table[lfo_am_cnt >> LFO_SH] >> 1;
  lfo_pm_cnt += lfo_pm_inc;
  LFO_PM = (lfo_pm_cnt>>LFO_SH) & 7;
}

// advance to the next sample
void advance() {
  OPLL_CH *CH;
  OPLL_SLOT *op;
  byte i;
  eg_timer += eg_timer_add;

  while (eg_timer >= eg_timer_overflow) {
    eg_timer -= eg_timer_overflow;
    eg_cnt++;
    for (i = 0; i < 9*2; i++) {
      CH = &P_CH[i/2];
      op = &CH->SLOT[i&1];
      switch (op->state) {
      case EG_DMP: // dump phase
        if (!(eg_cnt &((1<<op->eg_sh_dp)-1))) {
          op->volume += eg_inc[op->eg_sel_dp + ((eg_cnt>>op->eg_sh_dp)&7)];
          if (op->volume >= MAX_ATT_INDEX) {
            op->volume = MAX_ATT_INDEX;
            op->state = EG_ATT;
            op->phase = 0;
          }
        }
        break;
      case EG_ATT: // attack phase
        if (!(eg_cnt & ((1<<op->eg_sh_ar)-1))) {
          op->volume += (~op->volume*(eg_inc[op->eg_sel_ar + ((eg_cnt>>op->eg_sh_ar)&7)])) >>2;
          if (op->volume <= MIN_ATT_INDEX) {
            op->volume = MIN_ATT_INDEX;
            op->state = EG_DEC;
          }
        }
        break;
      case EG_DEC: // decay phase
        if (!(eg_cnt & ((1<<op->eg_sh_dr)-1))) {
          op->volume += eg_inc[op->eg_sel_dr + ((eg_cnt>>op->eg_sh_dr)&7)];
          if (op->volume >= op->sl) {
            op->state = EG_SUS;
          }
        }
        break;
      case EG_SUS: // sustain phase
        if(op->eg_type) {
          // non-percussive mode, do nothing
        } else {
          if (!(eg_cnt & ((1<<op->eg_sh_rr)-1))) {
            op->volume += eg_inc[op->eg_sel_rr + ((eg_cnt>>op->eg_sh_rr)&7)];
            if (op->volume >= MAX_ATT_INDEX) {
              op->volume = MAX_ATT_INDEX;
            }
          }
        }
        break;
      case EG_REL: // release phase
        if ((i&1) || ((rhythm & 0x20)&&(i>=12))) { // exclude modulators
          if (op->eg_type) {
            if (CH->sus) {
              if (!(eg_cnt & ((1<<op->eg_sh_rs)-1))) {
                op->volume += eg_inc[op->eg_sel_rs + ((eg_cnt>>op->eg_sh_rs)&7)];
                if (op->volume >= MAX_ATT_INDEX) {
                  op->volume = MAX_ATT_INDEX;
                  op->state = EG_OFF;
                }
              }
            } else {
              if(!(eg_cnt & ((1<<op->eg_sh_rr)-1))) {
                op->volume += eg_inc[op->eg_sel_rr + ((eg_cnt>>op->eg_sh_rr)&7)];
                if (op->volume >= MAX_ATT_INDEX) {
                  op->volume = MAX_ATT_INDEX;
                  op->state = EG_OFF;
                }
              }
            }
          } else {
            if (!(eg_cnt & ((1<<op->eg_sh_rs)-1))) {
              op->volume += eg_inc[op->eg_sel_rs + ((eg_cnt>>op->eg_sh_rs)&7)];
              if (op->volume >= MAX_ATT_INDEX) {
                op->volume = MAX_ATT_INDEX;
                op->state = EG_OFF;
              }
            }
          }
          break;
        default:
          break;
        }
      }
    }
    for (i=0; i<9*2; i++) {
      CH = &P_CH[i/2];
      op = &CH->SLOT[i&1];
      if (op->vib) {
        uint8_t block;

        uint16_t fnum_lfo = 8*((CH->block_fnum&0x01c0) >> 6);
        uint16_t block_fnum = CH->block_fnum*2;
        int8_t lfo_fn_table_index_offset = lfo_pm_table[LFO_PM + fnum_lfo];
        if (lfo_fn_table_index_offset) {
          block_fnum += lfo_fn_table_index_offset;
          block = (block_fnum&0x1c00)>>10;
          op->phase += (fn_tab[block_fnum&0x03ff] >> (7-block)) * op->mul;
        } else {
          op->phase += op->freq;
        }
      } else {
        op->phase += op->freq;
      }
    }

    noise_p += noise_f;
    i = noise_p >> FREQ_SH;
    noise_p &= FREQ_MASK;

    while(i) {
      if (noise_rng & 1) noise_rng ^= 0x800302;
      noise_rng >> 1;
      i--;
    }
  }
}

int16_t op_calc(uint32_t phase, uint32_t env, int32_t pm, uint16_t wave_tab) {
  uint32_t p = (env<<5) + sin_tab[wave_tab+((((int32_t)((phase& ~FREQ_MASK)+(pm<<17))) >> FREQ_SH ) & SIN_MASK) ];
  if (p >= TL_TAB_LEN) return 0;
  return tl_tab[p];
}

int16_t op_calc1(uint32_t phase, uint32_t env, int32_t pm, uint16_t wave_tab) {
  int32_t i = (phase&~FREQ_MASK)+pm;
  uint32_t p = (env<<5) + sin_tab[wave_tab + ((i>>FREQ_SH) & SIN_MASK)];
  if (p >= TL_TAB_LEN) return 0;
  return tl_tab[p];
}

#define volume_calc(OP) ((OP)->TLL + ((uint32_t)(OP)->volume) + (LFO_AM & (OP)->AMmask))

void chan_calc(OPLL_CH *CH) {
  OPLL_SLOT *SLOT;
  uint32_t env;
  int16_t  out;
  int32_t  phase_modulation;

  SLOT = &CH->SLOT[SLOT1];
  env = volume_calc(SLOT);
  out = SLOT->op1_out[0] + SLOT->op1_out[1];

  phase_modulation = SLOT->op1_out[0] = SLOT->op1_out[1];

  SLOT->op1_out[1] = 0;

  if (env < ENV_QUIET) {
    if (!SLOT->fb_shift) out = 0;
    SLOT->op1_out[1] = op_calc1(SLOT->phase, env, (out<<SLOT->fb_shift), SLOT->wavetable);
  }

  SLOT++;
  env = volume_calc(SLOT);
  if (env < ENV_QUIET) {
    output[0] += op_calc(SLOT->phase, env, phase_modulation, SLOT->wavetable);
  }
}

void rhythm_calc(OPLL_CH *CH, byte noise) {
  // SLOT 1
  OPLL_SLOT *SLOT = &CH[6].SLOT[SLOT1];
  int16_t out = SLOT->op1_out[0] + SLOT->op1_out[1];
  uint32_t env = volume_calc(SLOT);
  int32_t phase_modulation = SLOT->op1_out[0] = SLOT->op1_out[1];
  SLOT->op1_out[1] = 0;

  if (env < ENV_QUIET) {
    if (!SLOT->fb_shift) out = 0;
    SLOT->op1_out[1] = op_calc1(SLOT->phase, env, (out << SLOT->fb_shift), SLOT->wavetable);
  }

  // SLOT 2
  SLOT++;
  env = volume_calc(SLOT);
  if (env < ENV_QUIET) {
    output[1] += op_calc(SLOT->phase, env, phase_modulation, SLOT->wavetable);
  }

  // hi-hat
  env = volume_calc(SLOT7_1);
  if (env < ENV_QUIET) {
    byte bit7 = ((SLOT7_1->phase>>FREQ_SH)>>7)&1;
    byte bit3 = ((SLOT7_1->phase>>FREQ_SH)>>3)&1;
    byte bit2 = ((SLOT7_1->phase>>FREQ_SH)>>2)&1;
    byte res1 = (bit2 ^ bit7) | bit3;

    uint32_t phase = res1 ? (0x200|0xd0>>2) : 0xd0;
    byte res2 = ((((SLOT8_2->phase>>FREQ_SH)>>5)&1) | (((SLOT8_2->phase>>FREQ_SH)>>5)&1));

    if (res2) phase = 0x200|(0xd0>>2);
    if (phase & 0x200) {
      if (noise) phase = 0x200|(0xd0>>2);
    } else {
      if (noise) phase = 0xd0>>2;
    }
    output[1] += op_calc(phase<<FREQ_SH, env, 0, SLOT7_1->wavetable) * 2;
  }

  // snare drum
  env = volume_calc(SLOT7_2);
  if (env<ENV_QUIET) {
    byte bit8 = ((SLOT7_1->phase>>FREQ_SH)>>8)&1;
    uint32_t phase = bit8 ? 0x200 : 0x100;
    if (noise) phase ^= 0x100;
    output[1] += op_calc(phase<<FREQ_SH, env, 0, SLOT7_2->wavetable) * 2;
  }

  // tom tom
  env = volume_calc(SLOT8_1);
  if (env < ENV_QUIET) {
    output[1] += op_calc(SLOT8_1->phase, env, 0, SLOT8_1->wavetable) * 2;
  }

  // top cymbal
  env = volume_calc(SLOT8_2);
  if (env < ENV_QUIET) {
    byte bit7 = ((SLOT7_1->phase>>FREQ_SH)>>7)&1;
    byte bit3 = ((SLOT7_1->phase>>FREQ_SH)>>3)&1;
    byte bit2 = ((SLOT7_1->phase>>FREQ_SH)>>2)&1;
    byte res1 = (bit2 ^ bit7) | bit3;

    uint32_t phase = res1 ? 0x300 : 0x100;
    byte res2 = ((((SLOT8_2->phase>>FREQ_SH)>>5)&1) | (((SLOT8_2->phase>>FREQ_SH)>>5)&1));

    if (res2) phase = 0x300;
    output[1] += op_calc(phase<<FREQ_SH, env, 0, SLOT8_2->wavetable) * 2;
  }
}

void key_on(OPLL_SLOT *SLOT, byte key_set) {
  if (!SLOT->key) {
    // don't restart Phase Generator
    // set phase to Dump
    SLOT->state = EG_DMP;
  }
  SLOT->key |= key_set;
}

void key_off(OPLL_SLOT *SLOT, byte key_clr) {
  if (SLOT->key) {
    SLOT->key &= key_clr;
    if (!SLOT->key) {
      if (SLOT->state > EG_REL) {
        SLOT->state = EG_REL;
      }
    }
  }
}

void calc_fcslot(OPLL_CH *CH, OPLL_SLOT *SLOT) {
  int32_t ksr = CH->kcode >> SLOT->KSR;
  uint32_t SLOT_rs, SLOT_dp;
  SLOT->freq = CH->fc * SLOT->mul;

  if (SLOT->ksr != ksr) {
    SLOT->ksr = ksr;

    // calculate envelope generator rates
    if ((SLOT->ar + SLOT->ksr) < 16+62) {
      SLOT->eg_sh_ar  = eg_rate_shift [SLOT->ar + SLOT->ksr];
      SLOT->eg_sel_ar = eg_rate_select[SLOT->ar + SLOT->ksr];
    } else {
      SLOT->eg_sh_ar  = 0;
      SLOT->eg_sel_ar = 13*RATE_STEPS;
    }
    SLOT->eg_sh_dr  = eg_rate_shift [SLOT->dr + SLOT->ksr];
    SLOT->eg_sel_dr = eg_rate_select[SLOT->dr + SLOT->ksr];
    SLOT->eg_sh_rr  = eg_rate_shift [SLOT->rr + SLOT->ksr];
    SLOT->eg_sel_rr = eg_rate_select[SLOT->rr + SLOT->ksr];
  }

  if (CH->sus) {
    SLOT_rs = 16 + (5<<2);
  } else {
    SLOT_rs = 16 + (7<<2);
  }

  SLOT->eg_sh_rs  = eg_rate_shift [SLOT_rs + SLOT->ksr];
  SLOT->eg_sel_rs = eg_rate_select[SLOT_rs + SLOT->ksr];

  SLOT_dp = 16 + (13<<2);
  SLOT->eg_sh_dp  = eg_rate_shift [SLOT_dp + SLOT->ksr];
  SLOT->eg_sel_dp = eg_rate_select[SLOT_dp + SLOT->ksr];
}

void set_mul(byte slot, byte v) {
  OPLL_CH *CH = &P_CH[slot/2];
  OPLL_SLOT *SLOT = &CH->SLOT[slot&1];

  SLOT->mul = mul_tab[v&0x0f];
  SLOT->KSR = (v&0x10) ? 0 : 2;
  SLOT->eg_type = (v&0x20);
  SLOT->vib = (v&0x40);
  SLOT->AMmask = (v&0x80)?~0:0;
  calc_fcslot(CH, SLOT);
}

void set_ksl_tl(byte chan, byte v) {
  OPLL_CH *CH = &P_CH[chan];
  OPLL_SLOT *SLOT = &CH->SLOT[SLOT1];
  SLOT->ksl = ksl_shift[v >> 6];
  SLOT->TL  = (v&0x3f)<<(ENV_BITS-2-7);
  SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);
}

void set_ksl_wave_fb(byte chan, byte v) {
  OPLL_CH *CH = &P_CH[chan];
  OPLL_SLOT *SLOT = &CH->SLOT[SLOT1];
  SLOT->wavetable = ((v&0x08)>>3)*SIN_LEN;
  SLOT->fb_shift  = (v&7)? (v&7)+8 : 0;

  SLOT = &CH->SLOT[SLOT2];
  SLOT->ksl = ksl_shift[v>>6];
  SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);

  SLOT->wavetable = ((v&0x10)>>4)*SIN_LEN;
}

void set_ar_dr(byte slot, byte v) {
  OPLL_CH *CH = &P_CH[slot/2];
  OPLL_SLOT *SLOT = &CH->SLOT[slot&1];

  SLOT->ar = (v&0xf0) ? 16 + ((v&0xf0) >> 2) : 0;

  if ((SLOT->ar + SLOT->ksr) < 16+62) {
    SLOT->eg_sh_ar  = eg_rate_shift [SLOT->ar + SLOT->ksr];
    SLOT->eg_sel_ar = eg_rate_select[SLOT->ar + SLOT->ksr];
  } else {
    SLOT->eg_sh_ar = 0;
    SLOT->eg_sel_ar = 13*RATE_STEPS;
  }

  SLOT->dr = (v&0x0f)? 16 + ((v&0x0f) << 2) : 0;
  SLOT->eg_sh_dr  = eg_rate_shift [SLOT->dr + SLOT->ksr];
  SLOT->eg_sel_dr = eg_rate_select[SLOT->dr + SLOT->ksr];
}

void set_sl_rr(byte slot, byte v) {
  OPLL_CH *CH = &P_CH[slot/2];
  OPLL_SLOT *SLOT = &CH->SLOT[slot&1];

  SLOT->sl = sl_tab[v >> 4];
  
  SLOT->rr = (v&0x0f)? 16 + ((v&0x0f) << 2) : 0;
  SLOT->eg_sh_rr  = eg_rate_shift [SLOT->rr + SLOT->ksr];
  SLOT->eg_sel_rr = eg_rate_select[SLOT->rr + SLOT->ksr];
}

void load_instrument(byte chan, byte* inst) {
  byte slot = chan*2;
  set_mul         (slot,   inst[0]);
  set_mul         (slot+1, inst[1]);
  set_ksl_tl      (chan,   inst[2]);
  set_ksl_wave_fb (chan,   inst[3]);
  set_ar_dr       (slot,   inst[4]);
  set_ar_dr       (slot+1, inst[5]);
  set_sl_rr       (slot,   inst[6]);
  set_sl_rr       (slot+1, inst[7]);
}

void update_instrument_zero(byte r) {
  uint8_t* inst = &inst_tab[0][0];
  byte chan, chan_max = 9;

  if (rhythm & 0x20) chan_max = 6;

  switch (r) {
  case 0:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_mul(chan*2, inst[0]);
      }
    }
    break;
  case 1:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_mul(chan*2+1, inst[1]);
      }
    }
    break;
  case 2:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_ksl_tl(chan, inst[2]);
      }
    }
    break;
  case 3:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_ksl_wave_fb(chan, inst[3]);
      }
    }
    break;
  case 4:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_ar_dr(chan*2, inst[4]);
      }
    }
    break;
  case 5:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_ar_dr(chan*2, inst[5]);
      }
    }
    break;
  case 6:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_sl_rr(chan*2, inst[6]);
      }
    }
    break;
  case 7:
    for(chan=0; chan<chan_max; chan++) {  
      if ((instvol_r[chan]&0xf0)==0) {
        set_sl_rr(chan*2, inst[7]);
      }
    }
    break;
  }
}

void write_reg(byte r, byte v) {
  OPLL_CH *CH;
  OPLL_SLOT *SLOT;

  uint8_t *inst;
  byte chan, slot;

  switch(r&0xf0) {
    case 0x00: // 00-0f: control
    {
      switch(r&0x0f) {
      case 0x00:
      case 0x01:
      case 0x02:
      case 0x03:
      case 0x04:
      case 0x05:
      case 0x06:
      case 0x07:
        inst_tab[0][r&7] = v;
        update_instrument_zero(r&7);
      break;
      case 0x0e:
      {
        if (v&0x20) {
          if ((rhythm&0x20)==0) {
            // rhythm off->on
            load_instrument(6, inst_tab[16]);
            load_instrument(7, inst_tab[17]);
            CH = &P_CH[7];
            SLOT = &CH->SLOT[SLOT1];
            SLOT->TL = ((instvol_r[7]&0xf0)>>2) << (ENV_BITS-2-7);
            SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);
            load_instrument(8, inst_tab[18]);
            CH = &P_CH[8];
            SLOT = &CH->SLOT[SLOT1];
            SLOT->TL = ((instvol_r[8]&0xf0)>>2) << (ENV_BITS-2-7);
            SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);
          }
          // bass drum key on/off
          if (v&0x10) {
            key_on(&P_CH[6].SLOT[SLOT1], 2);
            key_on(&P_CH[6].SLOT[SLOT2], 2);
          } else {
            key_off(&P_CH[6].SLOT[SLOT1], ~2);
            key_off(&P_CH[6].SLOT[SLOT2], ~2);
          }
          // hi-hat
          if (v&0x01) {
            key_on (&P_CH[7].SLOT[SLOT1], 2);
          } else {
            key_off(&P_CH[7].SLOT[SLOT1],~2);
          }
          // snare-drum
          if (v&0x08) {
            key_on (&P_CH[7].SLOT[SLOT2], 2);
          } else {
            key_off(&P_CH[7].SLOT[SLOT2],~2);
          }
          // tom tom
          if (v&0x04) {
            key_on (&P_CH[8].SLOT[SLOT1], 2);
          } else {
            key_off(&P_CH[8].SLOT[SLOT1],~2);
          }
          // top-cymbal
          if (v&0x01) {
            key_on (&P_CH[8].SLOT[SLOT2], 2);
          } else {
            key_off(&P_CH[8].SLOT[SLOT2],~2);
          }
        } else {
          if (rhythm&0x20) {
            // rhythm on->off
            load_instrument(6, &inst_tab[instvol_r[6]>>4][0]);
            load_instrument(7, &inst_tab[instvol_r[7]>>4][0]);
            load_instrument(8, &inst_tab[instvol_r[8]>>4][0]);
          }
          key_off(&P_CH[6].SLOT[SLOT1], ~2);
          key_off(&P_CH[6].SLOT[SLOT2], ~2);
          key_off(&P_CH[7].SLOT[SLOT1],~2);
          key_off(&P_CH[7].SLOT[SLOT2],~2);
          key_off(&P_CH[8].SLOT[SLOT1],~2);
          key_off(&P_CH[8].SLOT[SLOT2],~2);
        }
        rhythm = v&0x3f;
      }
      break;
      }
    }
    break;
    
    case 0x10:
    case 0x20:
    {
      uint16_t block_fnum;
      chan = r&0x0f;
      if (chan >= 9) chan -= 9;

      CH = &P_CH[chan];
      if (r&0x10) {
        block_fnum= (CH->block_fnum&0x0f00) | v;
      } else {
        block_fnum = ((v&0x0f)<<8) | (CH->block_fnum&0xff);

        if (v&0x10) {
          key_on(&CH->SLOT[SLOT1], 1);
          key_on(&CH->SLOT[SLOT2], 1);
        } else {
          key_off(&CH->SLOT[SLOT1],~1);
          key_off(&CH->SLOT[SLOT2],~1);
        }
        
        CH->sus = v & 0x20;
      }
      if (CH->block_fnum != block_fnum) {
        uint8_t block;
        CH->block_fnum = block_fnum;

        CH->kcode = (block_fnum&0x0f00)>>8;
        CH->ksl_base = static_cast<uint32_t>(ksl_tab[block_fnum>>5]);

        block_fnum = block_fnum*2;
        block = (block_fnum&0x1c00) >> 10;
        CH->fc = fn_tab[block_fnum&0x03ff] >> (7-block);

        CH->SLOT[SLOT1].TLL = CH->SLOT[SLOT1].TL + (CH->ksl_base>>CH->SLOT[SLOT1].ksl);
        CH->SLOT[SLOT2].TLL = CH->SLOT[SLOT2].TL + (CH->ksl_base>>CH->SLOT[SLOT2].ksl);

        calc_fcslot(CH, &CH->SLOT[SLOT1]);
        calc_fcslot(CH, &CH->SLOT[SLOT2]);
      }
    }
    break;
    
    case 0x30: // inst 4 MSBs, vol 4 LSBs
    {
      uint8_t old_instvol;
      chan = r&0x0f;

      if (chan >= 9) chan -= 9;

      old_instvol = instvol_r[chan];
      instvol_r[chan] = v;

      CH = &P_CH[chan];
      SLOT = &CH->SLOT[SLOT2];
      SLOT->TL = ((v&0x0f)<<2)<<(ENV_BITS-2-8);
      SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);

      if ((chan>=6) && (rhythm&0x20)) {
        // in rhythm mode
        if (chan >= 7) {
          // only for channels 7 and 8
          SLOT = &CH->SLOT[SLOT1];
          SLOT->TL = ((instvol_r[chan]&0xf0)>>2)<<(ENV_BITS-2-7);
          SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);
        }
      } else {
        if ((old_instvol&0xf0) == (v&0xf0)) return;
        load_instrument(chan, inst_tab[instvol_r[chan]>>4]);
      }
    }
    break;
    
    default:
    break;
  }
}

void device_reset() {
  eg_timer = 0;
  eg_cnt = 0;
  noise_rng = 1;

  for (byte i = 0; i < 19; i++) {
    for (byte c = 0; c < 8; c++) {
      inst_tab[i][c] = default_inst_tab[i][c];
    }
  }

  write_reg(0x0f, 0);
  for (byte i = 0x3f; i>= 0x10; i--) {
    write_reg(i, 0x00);
  }
  
  for (byte c = 0; c < 9; c++) {
    P_CH[c].SLOT[0].wavetable = 0;
    P_CH[c].SLOT[0].state     = EG_OFF;
    P_CH[c].SLOT[0].volume    = MAX_ATT_INDEX;
    P_CH[c].SLOT[1].wavetable = 0;
    P_CH[c].SLOT[1].state     = EG_OFF;
    P_CH[c].SLOT[1].volume    = MAX_ATT_INDEX;
  }
}

volatile byte reg_latch;
volatile byte reg_control;

#if defined (__AVR_ATmega328P__)
const byte ioPin = 2;
const byte wrPin = 3;

inline void just_set_data_read() {
  DDRD &= B00001111; // PD4-PD7 -> D4-D7
  DDRB &= B11000011; // PB2-PB5 -> D0-D3

}
inline byte set_data_read() {
  just_set_data_read();
  return (PIND&0xf0)|((PINB>>2)&0xf);
}

inline void set_data_write(byte b) {
  DDRD |= B11110000;
  DDRB |= B00111100;
  PORTD = (PORTD&0xf) | (b&0xf0);
  PORTB = (PORTB&B11000011) | ((b&0xf)<<2);
}

void set_pins() {
  just_set_data_read();
  pinMode(wrPin, INPUT);
  pinMode(ioPin, INPUT_PULLUP);
  DDRB &= 0x03; // PB0-PB1 -> A0-A1
  DDRC &= 0xf0; // PC0-PC3 -> A4-A7
  attachInterrupt(digitalPinToInterrupt(ioPin), io_interrupt, CHANGE);
}
void io_interrupt() {
  if (PIND&4) {
    // a port access ended - better to set the ports to input here
    just_set_data_read();
    return;
  }
  byte addr = PINC & 0xf;
  switch(addr) {
  case 0xf:
    {
      if (PIND&8) { // write
        switch(PINB & 3) {
        case 0:
          reg_latch = set_data_read();
          break;
        case 1:
          write_reg(reg_latch, set_data_read());
          break;
        case 2:
          reg_control = set_data_read() & 3;
          break;
        }
      } else {
        if ((PINB&3)== 2) {
          set_data_write(reg_control);
        }
      }
    }
    break;
  default:
    return;
  }
}
#else
void io_interrupt() {
  // do nothing
}
#endif


void setup() {
  
  set_pins();
  
  lfo_am_inc = ((uint32_t)1<<LFO_SH) / 64;
  lfo_pm_inc = ((uint32_t)1<<LFO_SH) / 1024;
  noise_f = (uint32_t)((uint32_t)1 << FREQ_SH);
  eg_timer_add = (uint32_t)((uint32_t)1 << EG_SH);
  eg_timer_overflow = (uint32_t)((uint32_t)1 << EG_SH);
  device_reset();
}

void loop() {
  output[0] = 0;
  output[1] = 0;
  advance_lfo();
  for(byte c = 0; c < 6; c++) {
    chan_calc(&P_CH[c]);
  }
  if (!(rhythm & 0x20)) {
    chan_calc(&P_CH[6]);
    chan_calc(&P_CH[7]);
    chan_calc(&P_CH[8]);
  } else {
    rhythm_calc(&P_CH[0], noise_rng & 1);
  }
  advance();
}
